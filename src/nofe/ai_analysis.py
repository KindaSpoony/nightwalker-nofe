# src/nofe/ai_analysis.py
import os, openai, argparse
from pathlib import Path

SYSTEM_PROMPT = (
    "You are a senior OSINT analyst.  Given a CHAOS report generated by the "
    "NOFE pipeline, provide an executive analysis: identify the most "
    "important narratives, highlight geopolitical or economic risks, "
    "cross‑reference entities, flag potential misinformation, and suggest "
    "follow‑up questions for human analysts.  When useful, reference other "
    "sections of the report.  Be concise but insightful."
)

def load_report(report_path: str) -> str:
    return Path(report_path).read_text()

def generate_ai_analysis(report_text: str) -> str:
    openai.api_key = os.environ["OPENAI_API_KEY"]
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": report_text},
    ]
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=messages,
        temperature=0.4,
        max_tokens=1000,
    )
    return response["choices"][0]["message"]["content"].strip()

def main(report_path: str, output_path: str):
    text = load_report(report_path)
    analysis = generate_ai_analysis(text)
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("# AI Analysis\n\n" + analysis + "\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("report_path")
    parser.add_argument("--output_path", default="")
    args = parser.parse_args()
    out = args.output_path or args.report_path.replace("CHAOS_", "AI_CHAOS_")
    main(args.report_path, out)
